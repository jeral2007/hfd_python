#coding:utf8
__doc__ = u"""
## w3js0_table

- w3j0s
- \_print\_vals\_(jmax)

### w3js0 {#w3js0}
словарь _w3js0_ - табулированные данные, значения квадратов
3j символов Вигнера,
(j1,j2,j3/m1,m2,m3) при m1=-m2=1/2, m3=0, значения j1 меняются от
j1=0.5 до j1=jmax=5.5, значения j2 меняются от 0.5 до j1, j3 от j1-j2 до j1+j2

ключи w3js0 - кортежи значений j1, j2, j3, так например в _w3js0_[(0.5, 0.5, 0)]
содержится значение квадрата 3j символа (j1,j2,j3/1/2,-1/2,0) равное 0.5;
значения получены с использованием библиотечной функции из пакета _sympy_
_sympy.physics.wigner.wigner\_3j_.

### \_print\_vals\_ {#pvals}

функция \_print\_vals\_(jmax=11.5) использует функцию
_sympy.physics.wigner.wigner\_3j_ для вычисления значений 3j символов
с соответствующим значением jmax. Вычисленные значения выводятся в
стандартный поток вывода в форме (j1, j2, j3): значение. Такая форма
допускает легкий переаод в синтаксис python, данный модуль был сгенерирован
именно таким образом см [#w3js0] .
"""

w3js0 = {
    (0.5, 0.5,  0): 0.500000000000000,
    (0.5, 0.5,  1): 0.166666666666667,
    (1.5, 0.5,  1): 0.166666666666667,
    (1.5, 0.5,  2): 0.100000000000000,
    (1.5, 1.5,  0): 0.250000000000000,
    (1.5, 1.5,  1): 0.016666666666667,
    (1.5, 1.5,  2): 0.050000000000000,
    (1.5, 1.5,  3): 0.064285714285714,
    (2.5, 0.5,  2): 0.100000000000000,
    (2.5, 0.5,  3): 0.071428571428571,
    (2.5, 1.5,  1): 0.100000000000000,
    (2.5, 1.5,  2): 0.014285714285714,
    (2.5, 1.5,  3): 0.028571428571429,
    (2.5, 1.5,  4): 0.047619047619048,
    (2.5, 2.5,  0): 0.166666666666667,
    (2.5, 2.5,  1): 0.004761904761905,
    (2.5, 2.5,  2): 0.038095238095238,
    (2.5, 2.5,  3): 0.012698412698413,
    (2.5, 2.5,  4): 0.015873015873016,
    (2.5, 2.5,  5): 0.036075036075036,
    (3.5, 0.5,  3): 0.071428571428571,
    (3.5, 0.5,  4): 0.055555555555556,
    (3.5, 1.5,  2): 0.064285714285714,
    (3.5, 1.5,  3): 0.011904761904762,
    (3.5, 1.5,  4): 0.019841269841270,
    (3.5, 1.5,  5): 0.037878787878788,
    (3.5, 2.5,  1): 0.071428571428571,
    (3.5, 2.5,  2): 0.004761904761905,
    (3.5, 2.5,  3): 0.023809523809524,
    (3.5, 2.5,  4): 0.010822510822511,
    (3.5, 2.5,  5): 0.010822510822511,
    (3.5, 2.5,  6): 0.029137529137529,
    (3.5, 3.5,  0): 0.125000000000000,
    (3.5, 3.5,  1): 0.001984126984127,
    (3.5, 3.5,  2): 0.029761904761905,
    (3.5, 3.5,  3): 0.004870129870130,
    (3.5, 3.5,  4): 0.014610389610390,
    (3.5, 3.5,  5): 0.009365634365634,
    (3.5, 3.5,  6): 0.007284382284382,
    (3.5, 3.5,  7): 0.023795648795649,
    (4.5, 0.5,  4): 0.055555555555556,
    (4.5, 0.5,  5): 0.045454545454545,
    (4.5, 1.5,  3): 0.047619047619048,
    (4.5, 1.5,  4): 0.010101010101010,
    (4.5, 1.5,  5): 0.015151515151515,
    (4.5, 1.5,  6): 0.031468531468531,
    (4.5, 2.5,  2): 0.047619047619048,
    (4.5, 2.5,  3): 0.004329004329004,
    (4.5, 2.5,  4): 0.017316017316017,
    (4.5, 2.5,  5): 0.009324009324009,
    (4.5, 2.5,  6): 0.008158508158508,
    (4.5, 2.5,  7): 0.024475524475524,
    (4.5, 3.5,  1): 0.055555555555556,
    (4.5, 3.5,  2): 0.002164502164502,
    (4.5, 3.5,  3): 0.019480519480519,
    (4.5, 3.5,  4): 0.004495504495504,
    (4.5, 3.5,  5): 0.010489510489510,
    (4.5, 3.5,  6): 0.008158508158508,
    (4.5, 3.5,  7): 0.005439005439005,
    (4.5, 3.5,  8): 0.020156314273961,
    (4.5, 4.5,  0): 0.100000000000000,
    (4.5, 4.5,  1): 0.001010101010101,
    (4.5, 4.5,  2): 0.024242424242424,
    (4.5, 4.5,  3): 0.002397602397602,
    (4.5, 4.5,  4): 0.012587412587413,
    (4.5, 4.5,  5): 0.004195804195804,
    (4.5, 4.5,  6): 0.007459207459207,
    (4.5, 4.5,  7): 0.007166689519631,
    (4.5, 4.5,  8): 0.004031262854792,
    (4.5, 4.5,  9): 0.017185910065167,
    (5.5, 0.5,  5): 0.045454545454545,
    (5.5, 0.5,  6): 0.038461538461538,
    (5.5, 1.5,  4): 0.037878787878788,
    (5.5, 1.5,  5): 0.008741258741259,
    (5.5, 1.5,  6): 0.012237762237762,
    (5.5, 1.5,  7): 0.026923076923077,
    (5.5, 2.5,  3): 0.036075036075036,
    (5.5, 2.5,  4): 0.003885003885004,
    (5.5, 2.5,  5): 0.013597513597514,
    (5.5, 2.5,  6): 0.008158508158508,
    (5.5, 2.5,  7): 0.006526806526807,
    (5.5, 2.5,  8): 0.021116138763198,
    (5.5, 3.5,  2): 0.037878787878788,
    (5.5, 3.5,  3): 0.002081252081252,
    (5.5, 3.5,  4): 0.014568764568765,
    (5.5, 3.5,  5): 0.004079254079254,
    (5.5, 3.5,  6): 0.008158508158508,
    (5.5, 3.5,  7): 0.007198683669272,
    (5.5, 3.5,  8): 0.004319210201563,
    (5.5, 3.5,  9): 0.017504167658966,
    (5.5, 4.5,  1): 0.045454545454545,
    (5.5, 4.5,  2): 0.001165501165501,
    (5.5, 4.5,  3): 0.016317016317016,
    (5.5, 4.5,  4): 0.002331002331002,
    (5.5, 4.5,  5): 0.009324009324009,
    (5.5, 4.5,  6): 0.003839297956945,
    (5.5, 4.5,  7): 0.005758946935418,
    (5.5, 4.5,  8): 0.006365151875988,
    (5.5, 4.5,  9): 0.003182575937994,
    (5.5, 4.5, 10): 0.015003572279114,
    (5.5, 5.5,  0): 0.083333333333333,
    (5.5, 5.5,  1): 0.000582750582751,
    (5.5, 5.5,  2): 0.020396270396270,
    (5.5, 5.5,  3): 0.001359751359751,
    (5.5, 5.5,  4): 0.010878010878011,
    (5.5, 5.5,  5): 0.002285296402943,
    (5.5, 5.5,  6): 0.006855889208830,
    (5.5, 5.5,  7): 0.003536195486660,
    (5.5, 5.5,  8): 0.004420244358325,
    (5.5, 5.5,  9): 0.005683171317846,
    (5.5, 5.5, 10): 0.002500595379852,
    (5.5, 5.5, 11): 0.013155306128788,
}


def _print_vals_(jmax=10.5):
    from sympy.physics.wigner import wigner_3j
    for j1 in xrange(0, int(jmax - 0.5 + 1)):
        for j2 in xrange(0, j1+1):
            for k in xrange(j1-j2, j1+j2+2):
                w3j0 = float(wigner_3j(j1+0.5, j2+0.5, k, 0.5, -0.5, 0))
                print("({:.1f}, {:.1f}, {:2d}): {:.15f},".format(j1+0.5,
                                                                 j2+0.5, k,
                                                                 w3j0**2))

if __name__ == "__main__":
    _print_vals_(5.5)
